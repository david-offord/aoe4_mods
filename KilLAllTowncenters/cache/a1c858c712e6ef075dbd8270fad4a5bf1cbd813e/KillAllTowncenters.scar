--[[

EXAMPLE GAME MODE SCRIPT

This script demonstrates how to use an assortment of SCAR (Scripting at Relic) functions to create a Game Mode for Age of Empires IV.
We demonstrate how to setup a simple win condition that awards victory to the first player who constructs 5 houses and covers an assortment of topics like building/unit spawning, event tracking, and much more.

Search for the following topic titles (e.g. OPTIONS, RULES, etc.) in this script to see examples of their usage.

- OPTIONS allow you to add buttons to the Skirmish/Custom lobby when your Game Mode is selected and trigger functions based on what the host has selected. The buttons are added in the Options section of the Win Condition .rdo file and their functionality is driven by this script.
- RULES allow you to call script functions after a delay, on an interval, or whenever a game event (e.g. a unit is killed) occurs.
- OBJECTIVES communicate what the players' goals are and how they are progressing towards them using a UI element at the top left of their screen.
- ENTITIES are the objects you see in-game, like player constructed buildings, Sacred Sites, Stone Deposits, and Trees. Type "Entity_" in this script to view a list of functions you can use to manipulate these objects.
- SQUADS are in-game units. Type "Squad_" in this script to view a list of functions you can use to manipulate these objects.
- ENTITY GROUPS and SQUAD GROUPS (aka EGROUPS/SGROUPS) are bundles of Entities/Squads. It sometimes makes sense to add a number of objects to a group so you can manipulate them together (e.g. you may want to add a group of Spearmen to an SGROUP so you can command them all to attack a location).
- UPGRADES unlock functionality for a player, a unit, or a building.
- BLUEPRINTS are the instructions needed to create an Entity, Squad, or Upgrade. For example, a blueprint exists for each Civilization Villager. If you want to spawn a Mongol Villager, you will need to reference the Mongol Villager Blueprint. Type "BP_" in this script to view a list of Blueprint functions.
- EVENT CUES are messages that appear in the queue at the bottom-right of the player's screen. Some event cues occur automatically, like when an upgrade completes. You can configure your own event cues to communicate important game mode events to the player.

To play and test this Game Mode:

1. From the editor toolbar, select File > Save All to save any changes you have made to this mod.
2. From the editor toolbar, select Build > Build Mod.
3. Launch Age of Empires IV.
4. In the game client, navigate to Single Player > Skirmish > Create Game (alternatively, you can navigate to Multiplayer > Custom > Create Game).
5. In the Game Setup tab of the lobby, select the Edit button.
6. Select your Game Mode* and Start Game.

*Your Game Mode will have a red wrench icon next to it. This means that it is a local mod and you cannot launch with other players in the lobby. If you would like to play this Game Mode with other players, you will either need to:
1. Share your mod file with another player and have them place it in the following directory: YourDriveHere:\Users\YourNameHere\Documents\My Games\Cardinal\mods\extension\local
2. Publish your Mod from the Mods > My Mods screen. This will publish your Game Mode to all Age of Empires IV players! When a host selects your Game Mode, it will automatically be downloaded for other players in the lobby.


Additional documentation and function references can be found online.

]]

-----------------------------------------------------------------------
-- Imported Scripts

-- When you import a .scar file it will be initialized alongside your Game Mode .scar script.
-- You can also call functions from imported scripts directly. For example, cardinal.scar has a function called Player_SetCurrentAge() that allows you to set the age of a given player. To use this function, you first have to import cardinal.scar as is demonstrated below.
-- To examine the below scripts, right-click on the import() function and select "Open Document"
-----------------------------------------------------------------------

-- Import Utility Scripts
import("cardinal.scar") -- Contains sfx references, UI templates, and Civ/Age helper functions
import("ScarUtil.scar") -- Contains game helper functions

-- Import Gameplay Systems
import("gameplay/score.scar")     -- Tracks player score
import("gameplay/diplomacy.scar") -- Manages Tribute

-- Import Win Conditions
import("winconditions/annihilation.scar") -- Support for eliminating a player when they can no longer fight or produce units
import("winconditions/elimination.scar")  -- Support for player quitting or dropping (through pause menu or disconnection)
import("winconditions/surrender.scar")    -- Support for player surrender (through pause menu)
import("winconditions/wonder.scar")       -- Support for player surrender (through pause menu)
import("conditions/do_religious.scar")    -- Support for player surrender (through pause menu)

-- Import UI Support
import("gameplay/chi/current_dynasty_ui.scar") -- Displays Chinese Dynasty UI
import("gameplay/event_cues.scar")
import("gameplay/currentageui.scar")

-----------------------------------------------------------------------
-- Data
-----------------------------------------------------------------------

-- Global data table that can be referenced in script functions (e.g. _mod.module = "Mod")
_mod = {
    module = "Mod",
    objective_title = "$d50145c43d8b4d80b56efe845915a23a:3",
    options = { gameplay_options },
    icons = {
        objective = "icons\\races\\common\\victory_conditions\\victory_condition_conquest",
    },
}

-- Register the win condition (Some functions can be prepended with "Mod_" to be called automatically as part of the scripting framework)
Core_RegisterModule(_mod.module)
town_center_ids = {}
teams_to_town_center = {}
teams_by_progress = {}

DEBUG_MODE = false
MINIMUM_UNITS_BEFORE_SURRENDER = 50
MINIMUM_BUILDINGS_BEFORE_SURRENDER = 10

ui_messages = {}

-----------------------------------------------------------------------
-- Scripting framework
-----------------------------------------------------------------------

-- Called during load as part of the game setup sequence
function Mod_OnGameSetup()
    -- The following if statement checks which OPTIONS the host of the match selected.
    -- The UI buttons visible to the host via the game lobby are added in the Options section of the Win Condition .rdo file and their functionality is driven by the code below.
    -- In this example, the host can choose to give every play 200 resources per minute or 500 resources per minute

    -- Get the host-selected Options configured in the mod's .rdo file
    Setup_GetWinConditionOptions(_mod.options)

    if _mod.options.extra_win_conditions then
        Core_UnregisterModule("Religious")

        if _mod.options.extra_win_conditions.wonder_win_cond == false then
            Core_UnregisterModule("Wonder")
            print("Wonder Victory Disabled")
        end

        if _mod.options.extra_win_conditions.wonder_win_cond == false then
            Core_UnregisterModule("Religious")
            print("Religious Victory Disabled")
        end
    end

    -- Check if there is the economy_section data is available.
    -- economy_section matches the name of the OptionsSectionUIDescriptor Key configured in your Game Mode Win Condition .rdo file.
    if _mod.options.gameplay_options then
        -- If host set the ai to immediately surrender
        if _mod.options.gameplay_options.ai_townhall_destruction_behavior.enum_value == _mod.options.gameplay_options.ai_townhall_destruction_behavior.enum_items.surrenders then
            -- Here we are adding the resource amount selected by the host to the global _mod table that was configured above. It will then be easy for us to reference later in the Mod_GiveResources() function
            _mod.ai_behavior = "surrenders"

            -- You can use the print() function to print a string to the console
            -- You can open the console in a match by holding Ctrl+Alt+~
            -- This is useful for testing which parts of your script are running
            print("OPTION SELECTED: AI Surrenders")

            -- If host sets AI to keep fighting
        elseif _mod.options.gameplay_options.ai_townhall_destruction_behavior.enum_value == _mod.options.gameplay_options.ai_townhall_destruction_behavior.enum_items.continues_fighting then
            -- Store the resource amount selected by the host so it can be referenced elsewhere in the script
            _mod.ai_behavior = "continues_fighting"

            -- Print the selected option to the console for debugging
            print("OPTION SELECTED: AI Continues Fighting")
        end

        --do logic for extra house cap
        if _mod.options.gameplay_options.housing_multiplier.enum_value == _mod.options.gameplay_options.housing_multiplier.enum_items.one_x then
            -- Store the resource amount selected by the host so it can be referenced elsewhere in the script
            _mod.housing_pop_rate = 0
        else
            _mod.housing_pop_rate = 1
        end
        print("Housing Population Rate: " .. (_mod.housing_pop_rate))

        --logic for AI surrender rate
		
		local surrender_value = _mod.options.gameplay_options.ai_loss_percent_before_surrender_enum.enum_value
        if surrender_value == _mod.options.gameplay_options.ai_loss_percent_before_surrender_enum.enum_items.surrender_at_0_percent then
            _mod.ai_loss_percent_before_surrender = 0
        elseif surrender_value == _mod.options.gameplay_options.ai_loss_percent_before_surrender_enum.enum_items.surrender_at_10_percent then
            _mod.ai_loss_percent_before_surrender = 10.0
        elseif surrender_value == _mod.options.gameplay_options.ai_loss_percent_before_surrender_enum.enum_items.surrender_at_20_percent then
            _mod.ai_loss_percent_before_surrender = 20.0
        elseif surrender_value == _mod.options.gameplay_options.ai_loss_percent_before_surrender_enum.enum_items.surrender_at_30_percent then
            _mod.ai_loss_percent_before_surrender = 30.0
        end
        print("AI Surrender rate: " .. (_mod.ai_loss_percent_before_surrender))
		
    end
end

-- Called before initialization, preceding other module OnInit functions
function Mod_PreInit()
    -- Enables the Tribute UI by calling the TributeEnabled function in diplomacy.scar, which was imported at the top of this script
    -- Remove this or set to false if you do not want players to have access to resource trading via the Tribute panel
    Core_CallDelegateFunctions("TributeEnabled", true)
end

-- Called on match initialization before handing control to the player
function Mod_OnInit()
    -- Store the local player so we can reference them later
    localPlayer = Core_GetPlayersTableEntry(Game_GetLocalPlayer())

    -- CALLING FUNCTIONS: The following calls the Mod_FindTownCenter() and Mod_SpawnBuilding() functions directly and immediately.
    Mod_FindTownCenter()

    -- ONE SHOT RULES: The following rule runs the Mod_SpawnUnits() function after a 5 second delay. If you want to call a function without a delay, you can change the 5 to a 0 or simply call the function directly by typing Mod_SetupObjective()
    --Rule_AddOneShot(Mod_SpawnUnits, 5)
    -- INTERVAL RULES: The following rule runs the Mod_GiveResources() function every 60 seconds. This is useful for functions that need to query a game state or perform an action every so often (e.g. give players resources or spawning waves of enemies)
    Rule_AddInterval(Mod_CheckPlayerUnitsAndBuildings, 20)

    -- GLOBAL EVENT RULES: The following rule runs the Mod_OnConstructionComplete() function whenever a building is constructed. Type "GE_" in this script to see a list of global events.
    Rule_AddGlobalEvent(Mod_OnConstructionComplete, GE_ConstructionComplete)
    Rule_AddGlobalEvent(Mod_OnEntityKilled, GE_EntityKilled)
    Rule_AddGlobalEvent(Mod_OnEntityLandmarkDestroyed, GE_EntityLandmarkDestroyed)

    -- This is a for loop that does something for each player in the match.
    -- PLAYERS is a table that contains all of the players in the match.
    -- If there are two players it will run twice, if there are eight players it will run eight times, etc.
    for i, player in pairs(PLAYERS) do
        -- Set player starting Ages to Imperial
        -- Ages are mapped to: Dark Age = 1, Feudal Age = 2, Castle Age = 3, Imperial Age = 4
        if DEBUG_MODE and player.isHuman then
            Player_SetCurrentAge(player.id, 4)

            -- Set player starting resources
            -- RT stands for Resource Type
            Player_SetResource(player.id, RT_Food, 9000)
            Player_SetResource(player.id, RT_Wood, 9000)
            Player_SetResource(player.id, RT_Gold, 90000)
            Player_SetResource(player.id, RT_Stone, 9000)

            Player_SetMaxCapPopulation(player.id, CT_Personnel, 500)
            Player_SetMaxPopulation(player.id, CT_Personnel, 500)
			Mod_SpawnUnits(player)
			
        end

        local eg_player_entities = Player_GetEntities(player.id)
        -- Filter out everything in the ENTITY GROUP except for the Town Center
        EGroup_Filter(eg_player_entities, "town_center", FILTER_KEEP)
        -- Get the Town Center ENTITY by getting the first entry in the ENTITY GROUP we just filtered
        local entity = EGroup_GetEntityAt(eg_player_entities, 1)
        -- Get the Town Center's ENTITY ID
        -- Some functions require the ENTITY ID to perform an action on the ENTITY
        local entity_id = Entity_GetID(entity)
        -- Get the Town Center's position
        local position = Entity_GetPosition(entity)

        -- Store the player's Town Center information so it can be referenced later
        player.town_center = {
            entity = entity,
            entity_id = entity_id,
            position = position,
        }

        town_center_ids[i] = Entity_GetID(entity)

        --get player team and then map the town center id to it
        local team = Player_GetTeam(player.id)
        if teams_to_town_center[team] == nil then
            teams_to_town_center[team] = {}
        end

        --initialize that object for player to buildings and units

        player.most_buildings = 0
        player.most_units = 0

        player.player_team = team
        print(entity_id)
        teams_to_town_center[team][entity_id] = false
    end

    Core_CallDelegateFunctions("DiplomacyEnabled", false)
    Core_CallDelegateFunctions("TributeEnabled", true)
end

-- Called after initialization is done when game is fading up from black
function Mod_Start()
    -- Setup the player's objective UI by calling the below function directly
    Mod_SetupObjective()
end

-- Called when Core_SetPlayerDefeated() is invoked. Signals that a player has been eliminated from play due to defeat.
function Mod_OnPlayerDefeated(player, reason)

end

-- When a victory condition is met, a module must call Core_OnGameOver() in order to invoke this delegate and notify all modules that the match is about to end. Generally used for clean up (removal of rules, objectives, and UI elements specific to the module).
function Mod_OnGameOver()
    -- It is good practice to remove any Rules that were configured so they do not continue to run after the match has concluded
    Rule_RemoveGlobalEvent(Mod_OnConstructionComplete)
end

-----------------------------------------------------------------------
-- Mod Functions
-----------------------------------------------------------------------

-- This function creates the objective UI that appears in the top-left corner of each player's screen
function Mod_SetupObjective()
    -- Check if an objective has not been created yet
    if _mod.objective == nil then
        -- Create and store objective in the global table created at the start of this script
        _mod.objective = Obj_Create(localPlayer.id, _mod.objective_title, Loc_Empty(), _mod.icons.objective,
            "ConquestObjectiveTemplate", localPlayer.raceName, OT_Primary, 0, "conquestObj")

        -- Sets the objective's state to incomplete
        Obj_SetState(_mod.objective, OS_Incomplete)

        -- Sets the objective to visible so players can see it
        Obj_SetVisible(_mod.objective, true)

        -- Sets the progress element of the objective to visible so players can see it
        Obj_SetProgressVisible(_mod.objective, true)

        -- Sets the objective progress type to a counter
        Obj_SetCounterType(_mod.objective, COUNTER_CountUpTo)


        for i, player in pairs(PLAYERS) do
            --get player's team

            local team = Player_GetTeam(player.id)
            local enemy_landmarks = 0
            for k, landmarks in pairs(teams_to_town_center) do
                --if this is their team
                if k == team then
                    goto continue --the FUCK do you mean lua doesn't have a "continue"?!
                end

                enemy_landmarks = enemy_landmarks + length_of_table(landmarks)

                ::continue::
            end

            player.team_objective_requirements = enemy_landmarks

            --set progress to 0 for the team
            teams_by_progress[team] = 0

            -- Set the starting objective progress to 1 because we spawn a House for the player in Mod_SpawnBuilding()
            Obj_SetCounterCount(_mod.objective, 0)

            -- Set the maximum objective progress
            Obj_SetCounterMax(_mod.objective, enemy_landmarks)

            -- Set the objective progress bar percentage value
            Obj_SetProgress(_mod.objective, 0)
        end
    end
end

-- This function finds the starting Town Center for all players in the match, reveals it to all other players, then keeps track of whether they have been destroyed
function Mod_FindTownCenter()
    -- This is a for loop that does something for each player in the match.
    -- PLAYERS is a table that contains all of the players in the match.
    -- If there are two players it will run twice, if there are eight players it will run eight times, etc.
    for i, player in pairs(PLAYERS) do
        -- Get the player's entities and place them into an ENTITY GROUP
        local eg_player_entities = Player_GetEntities(player.id)
        -- Filter out everything in the ENTITY GROUP except for the Town Center
        EGroup_Filter(eg_player_entities, "town_center", FILTER_KEEP)
        -- Get the Town Center ENTITY by getting the first entry in the ENTITY GROUP we just filtered
        local entity = EGroup_GetEntityAt(eg_player_entities, 1)
        -- Get the Town Center's ENTITY ID
        -- Some functions require the ENTITY ID to perform an action on the ENTITY
        local entity_id = Entity_GetID(entity)
        -- Get the Town Center's position
        local position = Entity_GetPosition(entity)
        -- Store the player's Town Center information so it can be referenced later
        player.town_center = {
            entity = entity,
            entity_id = entity_id,
            position = position,
        }

        town_center_ids[i] = Entity_GetID(entity)

        -- Reveal Town Center locations for the first 30 seconds of the match
        FOW_RevealArea(player.town_center.position, 40, 30)

        -- Increase the production speed of the player's Town Center
        --Modifier_ApplyToEntity(Modifier_Create(MAT_Entity, "production_speed_modifier", MUT_Multiplication, false, 20, nil), player.town_center.entity, 0.0)
    end
end

-- This function spawns a group of Spearmen next each player's Town Center
function Mod_OnEntityLandmarkDestroyed(context)
    --check if this is even a town hall landmark that was destroyed
    if not Entity_IsEBPOfType(Entity_GetBlueprint(context.landmarkEntity), "town_center_capital") then
        return
    end

    local landmark_owner = context["landmarkOwner"]["PlayerID"]
    landmark_owner = get_player_by_id(landmark_owner)

    local landmark_team_id = landmark_owner.player_team

    --check here if it's a landmark that has already been destroyed. if so, ignore this function
    if teams_to_town_center[landmark_team_id][context["landmarkEntity"]['EntityID']] == true then
        return
    end
    --mark it as destroyed
    teams_to_town_center[landmark_team_id][context["landmarkEntity"]['EntityID']] = true

    -- go through every team in progress array, and update their scores if they are not the destroyed team
    for team_id, score in pairs(teams_by_progress) do
        if team_id ~= landmark_team_id then
            teams_by_progress[team_id] = teams_by_progress[team_id] + 1
        end
    end


    --update every player's score based on the new value
    for i, player in pairs(PLAYERS) do
        local player_team = player.player_team
        local new_score = teams_by_progress[player_team]

        local obj_progress_current = Obj_GetCounterCount(_mod.objective)
        -- Update their objective progress UI
        Obj_SetCounterCount(_mod.objective, new_score)

        --get the objective requirement
        local objective_requirements = player.team_objective_requirements
        Obj_SetProgress(_mod.objective, new_score / objective_requirements)

        ::continue::
    end

    get_winner_based_on_destroyed_centers()

    --TODO: logic for making AI immediately lose when their town center is destroyed
    if _mod.ai_behavior == "surrenders" then
        if AI_IsAIPlayer(landmark_owner.id) then
            --send_message_to_all_players(landmark_owner, 'I surrender!')
            local race_name = get_race_full_name_dave(landmark_owner.raceName)
            local player_name = landmark_owner.playerName.LocString
            show_message(player_name .. ' - ' .. race_name .. ' has surrendered!', 5)

            Core_SetPlayerDefeated(landmark_owner.id, Mod_LoserPresentation, WR_CONQUEST)
            destroy_all_entities_of_player(landmark_owner)
        end
    end
end

-- This function checks if a House was constructed, updates the builder's Objective progress, and ends the match if it was their 5th House built
-- It is called every time any player constructs a building based on the GLOBAL EVENT RULES configured in Mod_OnInit()
-- Global Event functions are provided with a bundle of data that provide "context" for the event. In the following example, the "context" parameter has been added to store this data.
-- The context parameter will be provided with a table of data that contains the player that constructed the building and the building constructed. You can reference this information within the function.
function Mod_OnConstructionComplete(context)
    -- Store the player who constructed the building
    local builder = Core_GetPlayersTableEntry(context.player)

    -- Check to see if there was a builder (just in case the building was constructed via script or some other means) and that the builder has not been eliminated yet
    if builder ~= nil and not builder.isEliminated then
        -- Check if the builder is the local player
        -- We only want to run the below code for the local player as only their objective UI needs to be updated
        --if builder.isLocal then
        -- Check if the building constructed was a house
        -- The first parameter contains the pbg (proberty bag group) data provided by the global event that tells us which building was constructed
        -- The second parameter is a Type. All Entities and Squads have a list of Types that help identify them. For example, while each Civilization has a different House entity they all are associated with the Type "house".
        -- Using the Entity_IsEBPPOfType() function, we can check that the entity constructed was a house easily without first checking what Civilization the player is playing and then checking if they constructed that Civilization's House entity.
        --if Entity_IsEBPOfType(context.pbg, "house") then
        --	
        --	-- Get the player's current objective progress
        --	local obj_progress_current = Obj_GetCounterCount(_mod.objective)
        --	-- Since the player constructed a house, calculate their new progress
        --	local obj_progress_new = obj_progress_current + 1
        --	-- Update their objective progress UI
        --	Obj_SetCounterCount(_mod.objective, obj_progress_new)
        --	Obj_SetProgress(_mod.objective, obj_progress_new / _mod.objective_requirement)
        --	
        --	-- If the player constructed their 5th house, set them as the winner and end the match
        --	if obj_progress_new == _mod.objective_requirement then
        --		
        --		-- Since the match is over, loop through every player
        --		for i, player in pairs(PLAYERS) do
        --			
        --			-- If the player being looked at is Allies with the player who constructed their 5th House, set them as the winner
        --			-- This is done by checking the Relationship (R) of two players using the Player_ObserveRelationship() function. R_ALLY returns true for any players on the same team (and if a player is checked against themself) while R_ENEMY returns true for players on other teams.
        --			if Player_ObserveRelationship(player.id, builder.id) == R_ALLY then
        --				
        --				-- Set the player as a winner and trigger the "Victory" stinger
        --				Core_SetPlayerVictorious(player.id, Mod_WinnerPresentation, WR_CONQUEST)
        --				
        --			-- Otherwise, set them as defeated
        --			else
        --				
        --				-- Set the player as a loser and trigger the "Defeat" stinger
        --				Core_SetPlayerDefeated(player.id, Mod_LoserPresentation, WR_CONQUEST)
        --				
        --			end
        --		end
        --		
        --	-- If this is not the player's 5th house
        --	else
        --		
        --		-- Play a success sound
        --		-- Additional sound references can be found in cardinal.scar
        --		-- To open cardinal.scar, scroll to line 44 of this script, right click on "import" and select "Open Document"
        --		Sound_Play2D("mus_stinger_campaign_triumph_short")
        --		
        --	end
        --end
        --end

        if Entity_IsEBPOfType(context.pbg, "house") then
            Player_SetMaxPopulation(builder.id, CT_Personnel,
                Player_GetCurrentPopulationCap(builder.id, CT_Personnel) + (10 * _mod.housing_pop_rate))
        end
    end
end

function Mod_OnEntityKilled(context)
    if context.victimOwner == nil or context.victimOwner.PlayerID == nil then
        return
    end

    local victimOwner = get_player_by_id(context.victimOwner.PlayerID)

    -- Check to see if there was a builder (just in case the building was constructed via script or some other means) and that the builder has not been eliminated yet
    if victimOwner ~= nil and not victimOwner.isEliminated then
		--if its a house
        if Entity_IsEBPOfType(Entity_GetBlueprint(context.victim), "house") then
            Player_SetMaxPopulation(victimOwner.id, CT_Personnel,
                Player_GetCurrentPopulationCap(victimOwner.id, CT_Personnel) - (10 * _mod.housing_pop_rate))
        end
		
		--check the count of entities, if they are an AI
		if victimOwner.isHuman == false then
			Mod_CheckIfAiShouldSurrender(victimOwner)
		end
		
    end
end

-- Victory Presentation
-- This creates the large "Victory" stinger that animates for winning players at the end of a match
function Mod_WinnerPresentation(playerID)
    -- If player is local
    if playerID == localPlayer.id then
        -- Clear player's selection
        Misc_ClearSelection()
        -- Hide UI
        Taskbar_SetVisibility(false)
        -- Set Win Condition Objective to complete
        Obj_SetState(_mod.objective, OS_Complete)

        -- Trigger objective complete pop up
        Obj_CreatePopup(_mod.objective, _mod.objective_title)
        -- Play Victory sfx
        Music_PlayStinger(MUS_STING_PRIMARY_OBJ_COMPLETE)
        -- Set objective to invisible
        Obj_SetVisible(_mod.objective, false)

        -- Create Victory Stinger
        Rule_AddOneShot(_gameOver_message,
            GAMEOVER_OBJECTIVE_TIME, {
                _playerID = playerID,
                _icon = _mod.icons.objective,
                _endType = Loc_GetString(11161277), -- "VICTORY"
                _message = Loc_Empty(),
                _sound = "mus_stinger_landmark_objective_complete_success",
                _videoURI = "stinger_victory"
            })
    end
end

-- Defeat Presentation
-- This creates the large "Defeat" stinger that animates for losing players at the end of a match
function Mod_LoserPresentation(playerID)
    -- If player is local
    if playerID == localPlayer.id then
        -- Clear player's selection
        Misc_ClearSelection()
        -- Hide UI
        Taskbar_SetVisibility(false)
        -- Set Win Condition Objective to failed
        Obj_SetState(_mod.objective, OS_Failed)

        -- Trigger objective complete pop up
        Obj_CreatePopup(_mod.objective, _mod.objective_title)
        -- Play Victory sfx
        Music_PlayStinger(MUS_STING_PRIMARY_OBJ_FAIL)
        -- Set objective to invisible
        Obj_SetVisible(_mod.objective, false)

        -- Create Defeat Stinger
        Rule_AddOneShot(_gameOver_message,
            GAMEOVER_OBJECTIVE_TIME, {
                _playerID = playerID,
                _icon = _mod.icons.objective,
                _endType = Loc_GetString(11045235), -- "DEFEAT"
                _message = Loc_Empty(),
                _sound = "mus_stinger_landmark_objective_complete_fail",
                _videoURI = "stinger_defeat"
            })
    end
end

function Mod_CheckPlayerUnitsAndBuildings()
    for i, player in pairs(PLAYERS) do
        local current_buildings = Player_GetBuildingsCount(player.id)
        local current_units = Player_GetCurrentPopulation(player.id, CT_Personnel) +
            Player_GetCurrentPopulation(player.id, CT_Vehicle) + Player_GetCurrentPopulation(player.id, CT_Medic)

        if player.most_buildings < current_buildings then
            player.most_buildings = (current_buildings * 1.0)
        end

        if player.most_units < current_units then
            player.most_units = current_units
        end
    end
end

--checks if AI has fallen so far behind it deems it unncessary to continue
--function Mod_CheckIfAnyAiShouldSurrender()
--    for i, player in pairs(PLAYERS) do
--        local current_buildings = Player_GetBuildingsCount(player.id)
--        local current_units = Player_GetCurrentPopulation(player.id, CT_Personnel) +
--            Player_GetCurrentPopulation(player.id, CT_Vehicle) + Player_GetCurrentPopulation(player.id, CT_Medic)
--
--        if player.most_buildings < current_buildings then
--            player.most_buildings = current_buildings
--        end
--
--        if player.most_units < current_units then
--            player.most_units = current_units
--        end
--    end
--end

function Mod_CheckIfAiShouldSurrender(player)
	--if its zero they should never surrender
	if(_mod.ai_loss_percent_before_surrender == 0) then
		return
	end
	
    local current_buildings = Player_GetBuildingsCount(player.id)
    local current_units = Player_GetCurrentPopulation(player.id, CT_Personnel) +
        Player_GetCurrentPopulation(player.id, CT_Vehicle) + Player_GetCurrentPopulation(player.id, CT_Medic)

	local units_surrender_count = (player.most_units * ((_mod.ai_loss_percent_before_surrender * 1.0) / 100))
	local building_surrender_count = (player.most_buildings * ((_mod.ai_loss_percent_before_surrender * 1.0) / 100))
	
    --check if the player has under the threshold needed for buildings
    if (current_buildings < building_surrender_count and player.most_buildings > MINIMUM_BUILDINGS_BEFORE_SURRENDER) or (current_units < units_surrender_count and player.most_units > MINIMUM_UNITS_BEFORE_SURRENDER) then
            make_ai_surrender(player, 5)
    end
end


--debug functions
function Mod_SpawnUnits(player)

		-- Get player's Civilization name
		local player_civ = Player_GetRaceName(player.id)
		
		-- Create a local variable for the Spearman BLUEPRINT (BP) we are going to find below
		-- The local variable needs to be established before the below IF statement so it can be referenced outside of it within the function
		local sbp_spearman  = BP_GetSquadBlueprint("unit_knight_4_eng")
		local sbp_trebuchet  = BP_GetSquadBlueprint("unit_trebuchet_4_tr_eng")
		
		-- Get a position offset from the player's Town Center
		local spawn_position = Util_GetOffsetPosition(player.town_center.position, 20, 10)
		
		-- Create a unique sgroup name for this player's spearmen units
		local sgroup_name = "sg_player_spearmen_" .. tostring(player.id)
		-- Create a SQUAD GROUP (SGROUP) that will act as a container for the spawned SQUADS
		-- SGROUPS are useful for controlling all of the spawned units at once via scripted commands.
		local sg_player_spearmen = SGroup_CreateIfNotFound(sgroup_name)
		
		-- This function spawns 16 Spearmen of the player's Civilization near their starting Town Center
		-- You can hover over the function to view the parameters it requires. From left to right:
		-- player = The player that the spawned units will belong to.
		-- sgroup = The SQUAD GROUP (SG) that the units will be spawned into.
		-- units = A table of data that contains the SQUAD BLUEPRINT (SBP) and the number of SQUADS (aka units) to spawn.
		-- spawn = The location the units will be spawned at.
		UnitEntry_DeploySquads(player.id, sg_player_spearmen, {{sbp = sbp_spearman, numSquads = 16 }}, spawn_position)
		UnitEntry_DeploySquads(player.id, sg_player_spearmen, {{sbp = sbp_spearman, numSquads = 16 }}, spawn_position)
		
		-- Get a position offset from the Town Center position
		local move_position = Util_GetOffsetPosition(player.town_center.position, 20, 20)
		-- Command the SGROUP to enter into a formation
		Cmd_Ability(sg_player_spearmen, BP_GetAbilityBlueprint("core_formation_line"))
		-- Command the SGROUP to Move to that position
		Cmd_FormationMove(sg_player_spearmen, move_position, false)
		
end



--helper functions begin

function make_ai_surrender(player, time_to_show_message)
    local race_name = get_race_full_name_dave(player.raceName)
    local player_name = player.LocString
    show_message(player_name .. ' - ' .. race_name .. ' has surrendered!', 5)

    Core_SetPlayerDefeated(player.id, Mod_LoserPresentation, WR_CONQUEST)
    destroy_all_entities_of_player(player)
end

function length_of_table(tab)
    local count = 0

    for i, l in pairs(tab) do
        count = count + 1
    end
    return count
end

function get_player_by_id(id)
    for i, player in pairs(PLAYERS) do
        if player.id['PlayerID'] == id then
            return player
        end
    end
end

function destroy_all_entities_of_player(player)
    local new_egroup = EGroup_CreateIfNotFound("kill_all_egroup")
    Player_GetAllEntities(player.id)
    local eg_test = Player_GetEntitiesEGroup(player.id, 'kill_all_egroup')

	
	EGroup_Filter('__Player' .. player.id['PlayerID'] .. 'Entities', "formational", FILTER_KEEP )
	
    --destroy all the entities
    --EGroup_DestroyAllEntities('kill_all_egroup')
    EGroup_DestroyAllEntities('__Player' .. player.id['PlayerID'] .. 'Entities')
	
end

function send_message_to_all_players(fromplayer, message)
    for i, player in pairs(PLAYERS) do
        Command_PlayerBroadcastMessage(fromplayer.id, player.id, 1, message)
    end
end

function show_message(message, delay_before_removal)
    table.insert(ui_messages, message)
    UI_SystemMessageShow(message)
    Rule_AddOneShot(hide_messages, delay_before_removal)
end

function hide_messages()
    for i, message in pairs(ui_messages) do
        UI_SystemMessageHide(message)
    end
end

function get_race_full_name_dave(race_abbr)
    if race_abbr == 'hre' then
        return 'Holy Roman Empire'
    elseif race_abbr == 'abbasid' then
        return 'Abbasid'
    elseif race_abbr == 'chinese' then
        return 'Chinese'
    elseif race_abbr == 'english' or race_abbr == 'eng' then
        return 'English'
    elseif race_abbr == 'french' then
        return 'French'
    elseif race_abbr == 'malian' then
        return 'Malian'
    elseif race_abbr == 'mongol' then
        return 'Mongol'
    elseif race_abbr == 'ottoman' then
        return 'Ottoman'
    elseif race_abbr == 'rus' then
        return 'Rus'
    elseif race_abbr == 'sultanate' then
        return 'Sultanate'
    end
end

function get_winner_based_on_destroyed_centers()
    local winning_team = -1
    local teams_that_won = 0

    --for every team, check their town centers
    for team, town_centers in pairs(teams_to_town_center) do
        local team_defeated = true

        --check if they have all been defeated. if they have, mark the team as lost
        for tc_id, status in pairs(town_centers) do
            if status == false then
                team_defeated = false
            end
        end

        --if they are still alive, mark them as the winning team, and then mark teams that one + 1
        if team_defeated == false then
            winning_team = team
            teams_that_won = teams_that_won + 1
        end
    end

    --at this point, check if theres only 1 team with a victory
    if teams_that_won == 1 then
        --go through all the teams, set the team as lost if they are not the winner, set the people on the winning team as victorious
        --for i, player in pairs(PLAYERS) do
        --	if player.player_team == winning_team then
        --		-- Set the player as a winner and trigger the "Victory" stinger
        --		Core_SetPlayerVictorious(player.id, Mod_WinnerPresentation, WR_CONQUEST)
        --	else
        --		-- Set the player as a loser and trigger the "Defeat" stinger
        --		Core_SetPlayerDefeated(player.id, Mod_LoserPresentation, WR_CONQUEST)
        --	end
        --end


        --for every team, set failed except the victorious one
        for i, team in pairs(TEAMS) do
            if team['index'] ~= (winning_team + 1) then
                Core_SetTeamDefeated(team, Mod_LoserPresentation, WR_CONQUEST)
            else
                Core_SetTeamVictorious(team, Mod_WinnerPresentation, WR_CONQUEST)
            end
        end
    end
end

function round(x)
	if x == nil then
		return
	end
    return x >= 0 and math.floor(x + 0.5) or math.ceil(x - 0.5)
end
